plugins {
    id 'java'
    id 'idea'
    id("com.google.protobuf") version "0.9.5"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

group = 'com.sendlix.group.mc'
version = '1.1.0'

repositories {
    mavenCentral()
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name ="Minecraft Libraries"
        url = "https://libraries.minecraft.net/"
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'src/main/proto'
        }
        resources {
            srcDirs 'src/main/resources'
        }

    }
}

dependencies {
    // BungeeCord API from sonatype
    compileOnly 'net.md-5:bungeecord-api:1.21-R0.3'
    implementation 'io.grpc:grpc-protobuf:1.74.0'

    implementation 'io.grpc:grpc-stub:1.74.0'
    implementation 'io.grpc:grpc-netty:1.74.0'

    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:4.31.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.74.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}



def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def props = [version: version, rootProjectName: rootProject.name]
    inputs.properties props
    expand props
    filteringCharset = 'UTF-8'
    filesMatching('bungee.yml') {
        expand props
    }
}

shadowJar {
    archiveVersion.set('')

    mergeServiceFiles()


    minimize {
        exclude(dependency('io.grpc:grpc-netty:.*'))
        exclude(dependency('io.grpc:grpc-core:.*'))
    }

    dependencies {
        include(dependency('io.grpc:.*'))
        include(dependency('io.netty:netty-codec-http2:.*'))
        include(dependency('io.perfmark:.*'))
    }

    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

tasks.named('build').configure {
    dependsOn shadowJar
}
